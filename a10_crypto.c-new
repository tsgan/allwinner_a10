/*-
 * Copyright (c) 2016 Ganbold Tsagaankhuu <ganbold@freebsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Allwinner A10/A20 Security System/Crypto accelerator
 */

#include <sys/cdefs.h>
__FBSDID("$FreeBSD$");

#include <sys/endian.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/bus.h>
#include <sys/rman.h>
#include <sys/kernel.h>
#include <sys/module.h>
#include <sys/sysctl.h>
#include <machine/bus.h>
#include <sys/random.h>

#include <dev/ofw/ofw_bus.h>
#include <dev/ofw/ofw_bus_subr.h>
#include <dev/extres/clk/clk.h>

#include <arm/allwinner/a10_crypto.h>

enum crypto_type {
	A10_CRYPTO = 1,
};

static struct ofw_compat_data compat_data[] = {
	{ "allwinner,sun4i-a10-crypto",		A10_CRYPTO},
	{ NULL,					0 }
};

struct a10_crypto_softc {
	device_t		dev;
	struct resource		*res;
	struct callout		co;
	int			ticks;
	uint32_t		sc_seed[A10_SS_FIFO_WORDS];
	uint32_t		sc_buf[A10_SS_FIFO_WORDS];
	int			sc_stall_count;
	long			sc_underrun;
	int			type;
};

static struct a10_crypto_softc *a10_crypto_sc;

static struct resource_spec a10_crypto_spec[] = {
	{ SYS_RES_MEMORY,	0,	RF_ACTIVE },
	{ -1, 0 }
};

#define	RD4(sc, reg)		bus_read_4((sc)->res, (reg))
#define	WR4(sc, reg, val)	bus_write_4((sc)->res, (reg), (val))

#define	RNG_STALL_CNT_DEFAULT	10

static void
a10_rng_start(struct a10_crypto_softc *sc)
{
	uint32_t prng_mode;
	int i;

	prng_mode = A10_SS_OP_PRNG | A10_SS_PRNG_CONTINUE | A10_SS_ENABLED;

	/* Write PRNG mode */
	WR4(sc, A10_SS_CTL, prng_mode);

	/* Write the seed */
	for (i = 0; i < A10_SS_FIFO_WORDS; i++)
		WR4(sc, A10_SS_KEY0 + i * 4, sc->sc_seed[i]);

	/* Start PRNG */
	WR4(sc, A10_SS_CTL, prng_mode | A10_SS_PRNG_START);
}

static void
a10_rng_stop(struct a10_crypto_softc *sc)
{
	uint32_t ctrl;

	/* Disable the RNG */
	ctrl = RD4(sc, A10_SS_CTL);
	ctrl &= ~A10_SS_PRNG_START;
	WR4(sc, A10_SS_CTL, ctrl);
}

static void
a10_rng_harvest(void *arg)
{
	struct a10_crypto_softc *sc = arg;
//	uint32_t *dest;
	uint32_t val;
//	u_int cnt, nread, num_avail, num_words;
//	int seen_underrun, num_stalls
	int i;
/*
	dest = sc->sc_buf;
	nread = num_words = 0;
	seen_underrun = num_stalls = 0;
	for (cnt = sizeof(sc->sc_buf) / sizeof(uint32_t); cnt > 0;
	    cnt -= num_words) {
*/
		/* Read status register to find out how many words available */
/*
		val = RD4(sc, A10_SS_FCSR);
		num_avail = A10_SS_TXFIFO_SPACES(val);
*/
		/* If we have none... */
/*
		if (num_avail == 0) {
			atomic_add_long(&sc->sc_underrun, 1);
			if (++seen_underrun >= sc->sc_stall_count) {
				if (num_stalls++ > 0) {
					device_printf(sc->dev,
					    "RNG stalled, disabling device\n");
					a10_rng_stop(sc);
					break;
				} else {
					device_printf(sc->dev,
					    "Too many underruns, resetting\n");
					a10_rng_stop(sc);
					a10_rng_start(sc);
					seen_underrun = 0;
				}
			}
*/
			/* Try again */
/*
			continue;
		}
		CTR2(KTR_DEV, "%s: %d words available in RNG FIFO",
		    device_get_nameunit(sc->dev), num_avail);
*/
		/* Pull MIN(num_avail, cnt) words from the FIFO */
//		num_words = (num_avail > cnt) ? cnt : num_avail;
//		bus_read_multi_4(sc->res, A10_SS_TXFIFO, dest, num_words);
		bus_read_multi_4(sc->res, A10_SS_TXFIFO, sc->sc_buf, A10_SS_DATA_LEN);
//		dest += num_words;
//		nread += num_words;
//	}

	/* Update the seed */
	for (i = 0; i < A10_SS_FIFO_WORDS; i++) {
		val = RD4(sc, A10_SS_KEY0 + i * 4);
		sc->sc_seed[i] = val;
	}

	WR4(sc, A10_SS_CTL, 0);

//	cnt = nread * sizeof(uint32_t);
//	if (cnt > 0)
		random_harvest_queue(sc->sc_buf, sizeof(sc->sc_buf),
		sizeof(sc->sc_buf) * NBBY / 2, RANDOM_PURE_ALLWINNER);

	callout_reset(&sc->co, sc->ticks, a10_rng_harvest, sc);
}

static int
a10_crypto_probe(device_t dev)
{

	if (!ofw_bus_status_okay(dev))
		return (ENXIO);

	if (ofw_bus_search_compatible(dev, compat_data)->ocd_data == 0)
		return (ENXIO);

	device_set_desc(dev, "A10/A20 Security System/Crypto accelerator");
	return (BUS_PROBE_DEFAULT);
}

static int
a10_crypto_attach(device_t dev)
{
	struct a10_crypto_softc *sc;
	clk_t clk_ss, clk_gate;
	int err, i;
	uint32_t reg_value = 0;

	sc = device_get_softc(dev);

	if (bus_alloc_resources(dev, a10_crypto_spec, &sc->res) != 0) {
		device_printf(dev, "cannot allocate resources for device\n");
		return (ENXIO);
	}

	a10_crypto_sc = sc;

	sc->type = ofw_bus_search_compatible(dev, compat_data)->ocd_data;
	switch (sc->type) {
	case A10_CRYPTO:
		/* Get clocks and enable them */
		err = clk_get_by_ofw_name(dev, 0, "ahb", &clk_gate);
		if (err != 0) {
			device_printf(dev, "Cannot get gate clock\n");
			return (ENXIO);
		}
		err = clk_get_by_ofw_name(dev, 0, "mod", &clk_ss);
		if (err != 0) {
			device_printf(dev, "Cannot get SS clock\n");
			return (ENXIO);
		}
		err = clk_enable(clk_gate);
		if (err != 0) {
			device_printf(dev, "Cannot enable clk gate\n");
			goto error;
		}
		err = clk_enable(clk_ss);
		if (err != 0) {
			device_printf(dev, "Cannot enable SS clock\n");
			goto error;
		}
		/*
		 * "Die Bonding ID"
		 */
		WR4(sc, A10_SS_CTL, A10_SS_ENABLED);
		reg_value = RD4(sc, A10_SS_CTL);
		reg_value >>= 16;
		reg_value &= 0x07;
		device_printf(dev, "Die ID %d\n", reg_value);
		WR4(sc, A10_SS_CTL, 0);

		/* Install a periodic collector for the RNG */
		if (hz > 100)
			sc->ticks = hz / 100;
		else
			sc->ticks = 1;

		sc->sc_stall_count = RNG_STALL_CNT_DEFAULT;

		/* Generate the seed fist */
		for (i = 0; i < A10_SS_FIFO_WORDS; i++)
			sc->sc_seed[i] = arc4random();

		/* Start the RNG */
		a10_rng_start(sc);

		callout_init(&sc->co, 1);
		callout_reset(&sc->co, sc->ticks, a10_rng_harvest, sc);

		break;
	default:
		break;
	}
	return (0);

error:
	if (clk_gate != NULL)
		clk_release(clk_gate);
	if (clk_ss != NULL)
		clk_release(clk_ss);
	bus_release_resources(dev, a10_crypto_spec, &sc->res);
	return (ENXIO);
}

static int
a10_crypto_detach(device_t dev)
{
	struct a10_crypto_softc *sc = device_get_softc(dev);

	a10_rng_stop(sc);
	callout_drain(&sc->co);

	bus_release_resources(dev, a10_crypto_spec, &sc->res);

	return (0);
}

static device_method_t a10_crypto_methods[] = {
	/* Device interface */
	DEVMETHOD(device_probe,		a10_crypto_probe),
	DEVMETHOD(device_attach,	a10_crypto_attach),
	DEVMETHOD(device_detach,	a10_crypto_detach),

	DEVMETHOD_END
};

static driver_t a10_crypto_driver = {
	"a10_crypto",
	a10_crypto_methods,
	sizeof(struct a10_crypto_softc),
};

static devclass_t a10_crypto_devclass;

DRIVER_MODULE(a10_crypto, simplebus, a10_crypto_driver, a10_crypto_devclass, 0, 0);
MODULE_VERSION(a10_crypto, 1);
MODULE_DEPEND(a10_crypto, crypto, 1, 1, 1);
MODULE_DEPEND(a10_crypto, randomdev, 1, 1, 1);
